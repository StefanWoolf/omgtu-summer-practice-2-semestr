#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №1. Знакомство с потоками.

**Цель:** Познакомиться с возможностями класса System.Thread платформы .NET Framework.

**Результаты:** После выполнения работы Вы сможете:
1. Запускать длительные операции в отдельном потоке.
2. Завершать поток.
3. Дожидаться завершения выполнения потока. 


**Материалы для самостоятельного изучения**.
1. [Основы управления потоками](https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-threading-basics)
2. [Использование потоков](https://learn.microsoft.com/en-us/dotnet/standard/threading/using-threads-and-threading)
3. [Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier)
4. [Interlocked операции](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0)

## Задание.
Реализовать вычисление определенного интеграла методом трапеции в несколько потоков.

Отрезок, на котором происходит вычисление, разбивается на отрезки по количеству потоков. Для каждого отрезка значение 
интеграла считается в отдельном потоке, после завершения вычисоения полученный рельтаты суммирутся.

**Указание**.
1. Для суммирования результатов удобно воспользоваться разделяемой переменной, к которой будут прибалятся результаты вычисления прямо в самом потоке. Для синхронизации операций сложения лучше всего восользоваться [Interlocked операцией](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0).
2. Основная функция долна дождаться завершения всех потоков, которые вычисляют значение на отрезках, прежде чем возвратить результат. Для этого удобнее всего использовать Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier).

#!csharp

using System;
using System.Threading;

// Вычисление определенного интеграла
class DefiniteIntegral
{
    // a, b - границы отрезка, на котором происходит вычисление определенного интеграла
    // function - функция, для которой вычисляется определенный интеграл
    // step - размер одного шага разбиения
    // threadsNumber - число потоков, которые используются для вычислений
    public static double Solve(double a, double b, Func<double, double> function, double step, int threadsNumber)
    {
        Barrier barrier = new Barrier(threadsNumber+1);//барьер для ВСЕХ потоков *синхронизация

        int countSegments = Convert.ToInt32((b-a)/step);//переменная кол-во разбиений
        double[] answersThreads = new double[threadsNumber]; //все решения потоков
        double answer = 0.0; //переменная итогового результата

        Thread[] threads = new Thread[threadsNumber];//создаем потоки
        for (int i=0; i<threadsNumber; i++)
        {
            int indexThread = i;
            threads[i] = new Thread(() => StartThread(indexThread));//выдаем задачу каждому потоку
            threads[i].Start();//запуск потока
        }

        barrier.SignalAndWait();//ждем завершения всех потоков
        for (int i = 0; i < threadsNumber; i++)answer += answersThreads[i];//суммируем все значения потоков
        return answer;

        void StartThread(int indexThread)//работа для потока
        {
            int start = (indexThread* countSegments)/threadsNumber;
            int end = ((indexThread+1) *countSegments)/threadsNumber;
            double resultThread = 0.0;
            for (int i=start; i<end; i++) resultThread += step*function(a+ i*step);
            answersThreads[indexThread] = resultThread;
            barrier.SignalAndWait(); //уведомлялка что поток закончил свою работу
        }
    }
}

#!csharp

#r "nuget: xunit, 2.8.1"
using Xunit;

var X = (double x) => x;
var SIN = (double x) => Math.Sin(x);

Assert.Equal(0, DefiniteIntegral.Solve(-1, 1, X, 1e-4, 2), 1e-4);

Assert.Equal(0, DefiniteIntegral.Solve(-1, 1, SIN, 1e-5, 8), 1e-4);

Assert.Equal(50, DefiniteIntegral.Solve(0, 10, X, 1e-6, 8), 1e-5);
