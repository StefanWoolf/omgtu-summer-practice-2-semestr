#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №5. Идиома производитель-потребитель.

**Цель:** Изучить примитив синхронизации Очередь сообщений.

**Результаты:** После выполнения работы Вы сможете:
1. Передавать данные между потоками.
2. Изучите примтив синхронизации, который используется в современных архитектурах высоко-нагруженных приложений Event Loop


**Материалы для самостоятельного изучения**.
1. [Потоко-безопасные коллекции](https://learn.microsoft.com/en-us/dotnet/standard/collections/thread-safe/)
2. Идиома производитель-потребитель Глава 4 книги Г. Эндрюс Основы многопоточного, параллельного и распределенного программирования

## Задание.
Реализовать приложение Ping-Pong.

Создать дав потока, каждый из которых в цикле читает данные из BlockingCollection<Message>. После того, как поток прочитал объект из очереди, вызвал его метод Handle(), он создает новый объект класса Message и записывает его в очередь другого потока. Каждый поток всего должен обработать 100 сообщений.

**Указание**.
1. Как запустить процесс обмена объектами Message между потоками? Первый объект Message пишем в очередь одного из потоков прямо из кода, коорый жти потоки стартовал.
2. Не забываем дождаться завершения работы потоков.

#!csharp

#r "nuget: xunit, 2.8.1"
using System.Collections.Concurrent;
using System.Threading;
using Xunit;

class Message
{
    static int messageHandled = 0;
    int id;
    public Message()
    {
        id = Thread.CurrentThread.ManagedThreadId;//идентификатора текущего потока при создании сообщения
    }

    public void Handle()
    {
        Interlocked.Increment(ref messageHandled);//атомарная операция увеличения значения +
        Assert.NotEqual(id, Thread.CurrentThread.ManagedThreadId);//проверка что сообщение обрабатывается разными потоками ?
    }

    public static void Check()
    {
        Assert.Equal(200, messageHandled);//проверка что обработано было только 200 сообщений +
    }
}

var queue1 = new BlockingCollection<Message>(2); //очередь первого потока
var queue2 = new BlockingCollection<Message>(2); //очередь второго потока

Thread thread1 = new Thread(()=> Ping(queue1, queue2));
Thread thread2 = new Thread(()=> Pong(queue2, queue1));

thread1.Start(); thread2.Start(); //запуск потоков

thread1.Join(); thread2.Join();//ожидаем завершение потоков

void Ping(BlockingCollection<Message> queue1, BlockingCollection<Message> queue2)
{
    for (int i=0; i<100; i++)
    {
        queue2.Add(new Message());//доюовляем сообщение в очередь2
        queue1.Take().Handle();//берем сообщение из очереди1 и выполняем операцию
    }
}

void Pong(BlockingCollection<Message> queue1, BlockingCollection<Message> queue2)
{
    for (int i=0; i<100; i++)
    {
        queue1.Take().Handle();
        queue2.Add(new Message());
    }
}

/*не знаю правильно ли я выполнил задание, но я понял что мы должны обрабатывать сообщения по очереди используя 
только 2 потока производитель-потребитель. Однин поток обрабаитывает сообщение и затем создает запрос на второй поток.*/

#!csharp

Assert.Equal(0, queue1.Count);
Assert.Equal(0, queue2.Count);
Message.Check();
